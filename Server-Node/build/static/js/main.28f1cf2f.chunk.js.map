{"version":3,"sources":["Config.ts","js/main.js","js/App.js","reportWebVitals.js","index.js"],"names":["Config","uri","versions","endpoints","appId","redirectUri","scopes","parseJwt","token","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","msalConfig","auth","clientId","authority","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","App","loginRequest","useState","msalInstance","setMsalInstance","setLastRequest","graph","setGraph","account","setAccount","accountInfo","setAccountInfo","accountId","setAccountId","handleResponse","resp","a","log","homeAccountId","setAccessToken","accessToken","decoded","stringify","stringDecoded","replaceAll","setDecodedToken","setTokenAquired","currentAccounts","getAllAccounts","length","signIn","method","loginPopup","then","catch","tokenAquired","decodedToken","request","alert","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenPopup","results","selectedUri","setSelectedUri","selectedVersion","setSelectedVersion","selectedEndpoint","setSelectedEndpoint","graphResults","useEffect","PublicClientApplication","className","role","type","onClick","handleRedirectPromise","logoutRequest","getAccountByHomeId","logoutRedirect","signOut","getTokenPopup","style","background","Autocomplete","width","value","onChange","event","newValue","onInputChange","newInputValue","options","option","renderInput","params","TextField","label","Button","requestOptions","headers","body","version","endpoint","fetch","response","json","variant","marginTop","height","language","selectOnLineNumbers","roundedSelection","cursorStyle","automaticLayout","theme","formatOnPaste","String","wordWrap","autoIndent","readOnly","tabSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28f1cf2f.chunk.js","sourcesContent":["const Config = {\r\n  uri: [\"https://graph.microsoft.com\"],\r\n  versions: [\"stagingbeta\", \"stagingv1.0\", \"beta\", \"v1.0\"],\r\n  endpoints: [\"me\",\"groups\"],\r\n  appId: '8a792f49-ae0d-4b9b-92d2-614fcba43bea',\r\n  redirectUri: 'http://localhost:8080/',\r\n  scopes: [\r\n    'user.read',\r\n    'mailboxsettings.read',\r\n    'calendars.readwrite'\r\n  ]\r\n};\r\n\r\nexport default Config;","export function callMSGraph(uri, versions, endpoint, accessToken, callback) {\r\n  const headers = new Headers();\r\n  const bearer = `Bearer ${accessToken}`;\r\n\r\n  headers.append(\"Authorization\", bearer);\r\n\r\n  const options = {\r\n      method: \"GET\",\r\n      headers: headers\r\n  };\r\n\r\n  console.log('request made to Graph API at: ' + new Date().toString());\r\n\r\n  fetch(uri+\"/\"+versions+\"/\"+endpoint, options)\r\n      .then(response => response.json())\r\n      .then(response => callback(response, endpoint))\r\n      .catch(error => console.log(error));\r\n}\r\n\r\nexport function parseJwt (token) {\r\n  var base64Url = token.split('.')[1];\r\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n  }).join(''));\r\n\r\n  return JSON.parse(jsonPayload);\r\n};","import React, { useState, useEffect } from 'react';\n\n//https://wangchujiang.com/react-monacoeditor/\nimport MonacoEditor from '@uiw/react-monacoeditor';\n\nimport { AuthCodeMSALBrowserAuthenticationProvider } from '@microsoft/microsoft-graph-client/authProviders/authCodeMsalBrowser';\n//https://www.npmjs.com/package/@azure/msal-browser\nimport { InteractionType, PublicClientApplication, EventType, LogLevel, EventMessage} from '@azure/msal-browser';\nimport { useMsal,MsalProvider  } from '@azure/msal-react';\n\n//https://material-ui.com/components/autocomplete/\nimport {TextField, Button} from '@material-ui/core';\nimport {Autocomplete} from '@material-ui/lab';\n\nimport Config from '../Config';\n\nimport {callMSGraph, parseJwt} from './main'\nimport '../css/main.css';\n\nconst msalConfig = {\n  auth: {\n      clientId: \"8a792f49-ae0d-4b9b-92d2-614fcba43bea\",\n      authority: \"https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47\",\n      redirectUri: \"http://localhost:3000\"\n  },\n  cache: {\n      cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\n      storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n  system: {\n      loggerOptions: {\n          loggerCallback: (level, message, containsPii) => {\n              if (containsPii) {\t\n                  return;\t\n              }\t\n              switch (level) {\t\n                  case LogLevel.Error:\t\n                      console.error(message);\t\n                      return;\t\n                  case LogLevel.Info:\t\n                      console.info(message);\t\n                      return;\t\n                  case LogLevel.Verbose:\t\n                      console.debug(message);\t\n                      return;\t\n                  case LogLevel.Warning:\t\n                      console.warn(message);\t\n                      return;\t\n              }\n          }\n      }\n  }\n};\n\nfunction App() {\n\n  const loginRequest = {\n    scopes: [\"User.Read\"]\n  };\n\n  let [msalInstance, setMsalInstance] = useState(null);\n  let [lastRequest, setLastRequest] = useState({});\n\n  ///////////////////////////////////////////////////////////////////\n  // Set Graph Call Type\n  let [graph, setGraph] = useState(\"Microsoft Graph\");\n  let changeGraph = () => {\n    if(graph ===\"Microsoft Graph\")\n      setGraph(\"AAD Graph\")\n    else\n      setGraph(\"Microsoft Graph\")\n  }\n  \n  ///////////////////////////////////////////////////////////////////\n  // Set Account Information\n  let [account, setAccount] = useState(\"Sign In\");\n  let [accountInfo, setAccountInfo] = useState(null);\n  let [accountId, setAccountId] = useState(\"\");\n  let changeSignIn = () => {\n    if(account ===\"Sign In\"){\n      msalInstance.handleRedirectPromise().then(handleResponse).catch((error) => {\n        console.log(error);\n      });\n    }else\n      signOut()\n  }\n  let handleResponse = async (resp) => {\n    console.log(resp)\n    if (resp !== null) {\n      setAccountId(resp.account.homeAccountId);\n      setAccessToken(resp.accessToken)\n      let decoded = await parseJwt(resp.accessToken);\n      let stringDecoded = await JSON.stringify(decoded)\n      stringDecoded = await stringDecoded.replaceAll(\",\", \",\\n\");\n      setDecodedToken(stringDecoded)\n      setTokenAquired(true)\n      setAccountInfo(resp.account)\n      setLastRequest(resp)\n    }else{\n      const currentAccounts = msalInstance.getAllAccounts();\n      console.log(currentAccounts)\n      if (!currentAccounts || currentAccounts.length < 1) {\n        signIn(\"loginRedirect\");\n        setAccount(\"Sign Out\")\n      } else if (currentAccounts.length > 1) {\n          // Add choose account code here\n      } else if (currentAccounts.length === 1) {\n          setAccountId(currentAccounts[0].homeAccountId);\n          setAccountInfo(currentAccounts[0])\n          setAccount(\"Sign Out\")\n      }\n    }\n  }\n  async function signIn(method) {\n    //signInType = isIE ? \"loginRedirect\" : method;\n    let signInType = method\n    // if (signInType === \"loginPopup\") {\n      return msalInstance.loginPopup(loginRequest).then(handleResponse).catch(function (error) {\n          console.log(error);\n      });\n    // } else if (signInType === \"loginRedirect\") {\n    //     return msalInstance.loginRedirect(loginRequest);\n    // }\n  }\n  function signOut() {\n    const logoutRequest = {\n        account: msalInstance.getAccountByHomeId(accountId)\n    };\n    msalInstance.logoutRedirect(logoutRequest);\n    setAccount(\"Sign In\")\n    setAccessToken(\"\")\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // Set AccessToken\n  let [tokenAquired, setTokenAquired] = useState(false);\n  let [accessToken, setAccessToken] = useState(\"\");\n  let [decodedToken, setDecodedToken] = useState(\"\");\n  async function getTokenPopup(request, account) {\n    if(!accountInfo){\n      alert(\"Login First\")\n      return null;\n    }\n    request.account = account;\n    let results = await msalInstance.acquireTokenSilent(request).catch(async (error) => {\n        console.log(\"silent token acquisition fails.\");\n        if (error instanceof msalInstance.InteractionRequiredAuthError) {\n            console.log(\"acquiring token using popup\");\n            return msalInstance.acquireTokenPopup(request).catch(error => {\n                console.error(error);\n            });\n        } else {\n            console.error(error);\n        }\n    });\n    console.log(\"getTokenPopup :\", results)\n    let decoded = await parseJwt(results.accessToken);\n    let stringDecoded = await JSON.stringify(decoded)\n    stringDecoded = await stringDecoded.replaceAll(\",\", \",\\n\");\n\n    setDecodedToken(stringDecoded)\n    setAccessToken(results.accessToken)\n    setLastRequest(results)\n    return\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // Graph Calls\n  let [selectedUri, setSelectedUri] = useState(\"\");\n  let [selectedVersion, setSelectedVersion] = useState(\"\");\n  let [selectedEndpoint, setSelectedEndpoint] = useState(\"\");\n  let [graphResults, setGraphResults] = useState(\"\");\n  function MakeCall()\n  {\n    // if(accessToken)\n    //   callMSGraph(selectedUri, selectedVersion, selectedEndpoint, accessToken, SetResults);\n    // Simple POST request with a JSON body using fetch\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        uri : \"https://graph.microsoft.com/\",\n        version : \"v1.0\",\n        endpoint : \"me\"\n       })\n    };\n    fetch('http://localhost:3000/GraphCall', requestOptions)\n      .then(response => console.log(response.json()))\n      //.then(data => this.setState({ postId: data.id }));\n\n  }\n\n  async function SetResults (response, endpoint) {\n    console.log(response,endpoint)\n    let stringResponse = await JSON.stringify(response)\n    stringResponse = await stringResponse.replaceAll(\",\", \",\\n\");\n    stringResponse = await stringResponse.replaceAll(\"[\", \"\\n[\\n\");\n    stringResponse = await stringResponse.replaceAll(\"]\", \"\\n]\\n\");\n    stringResponse = await stringResponse.replaceAll(\"{\", \"\\n{\\n\");\n    stringResponse = await stringResponse.replaceAll(\"}\", \"\\n}\\n\");\n    setGraphResults(stringResponse)\n  }\n\n  useEffect(() => {\n    setMsalInstance(new PublicClientApplication(msalConfig)); \n  },[]);\n\n  return (\n    <div className=\"\">\n\n      {/* Navbar */}\n      <div className=\"nav row\" >\n        <div className=\"col-8\"> Graph Helper </div>\n        <div className=\"col-4 btn-group\" role=\"group\" aria-label=\"...\">\n          <button type=\"button\" className=\"btn\" onClick={changeGraph}>{graph}</button>\n          <button type=\"button\" className=\"btn\" onClick={changeSignIn}>{account}</button>\n          <button type=\"button\" className=\"btn\" onClick={()=>console.log(getTokenPopup(loginRequest, accountInfo))} >Get {tokenAquired? \"New\": \"\"} Token</button>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        {/* Graph Section */}\n        <div className=\"col-8 row\" style={{background: \"#f4f4fa\"}}>\n\n          <div className=\"col-4\">\n            <Autocomplete \n              style={{width:\"100%\"}}\n              value={selectedUri}\n              onChange={(event, newValue) => { setSelectedUri(newValue);}}\n              onInputChange={(event, newInputValue) => {setSelectedUri(newInputValue);}}\n              options={Config.uri.map((option) => option)}\n              renderInput={(params) => ( <TextField {...params} label=\"Graph Uri\"/>)}\n            />\n          </div>\n          <div className=\"col-2\">\n            <Autocomplete\n              style={{width:\"100%\"}}\n              value={selectedVersion}\n              onChange={(event, newValue) => { setSelectedVersion(newValue);}}\n              onInputChange={(event, newInputValue) => {setSelectedVersion(newInputValue);}}\n              options={Config.versions.map((option) => option)}\n              renderInput={(params) => ( <TextField {...params} label=\"Version\"/>)}\n            />\n          </div>\n          <div className=\"col-4\">\n            <Autocomplete\n                style={{width:\"100%\"}}\n                value={selectedEndpoint}\n                onChange={(event, newValue) => { setSelectedEndpoint(newValue);}}\n                onInputChange={(event, newInputValue) => {setSelectedEndpoint(newInputValue);}}\n                options={Config.endpoints.map((option) => option)}\n                renderInput={(params) => ( <TextField {...params} label=\"Endpoints\"/>)}\n            />\n          </div>\n          <div className=\"col-2\">\n            <Button \n              onClick={MakeCall}\n              variant=\"contained\" \n              style={{marginTop: 10, width: \"100%\"}}>\n                Query\n            </Button>\n          </div>\n        \n          <div className=\"col-12\">\n            <MonacoEditor\n                height=\"325px\"\n                language=\"json\"\n                value={graphResults}\n                options={{\n                  selectOnLineNumbers: true,\n                  roundedSelection: false,\n                  cursorStyle: 'line',\n                  automaticLayout: true,\n                  theme: 'vs-dark',\n                }}\n              />\n          </div>\n        </div>\n\n        {/* Token Info */}\n        <div className=\"col-4\" style={{background: \"#eee\"}}>\n\n          <MonacoEditor\n            height=\"400px\"\n            language=\"json\"\n            formatOnPaste=\"true\"\n            value={String(decodedToken)}\n            options={{\n              selectOnLineNumbers: true,\n              roundedSelection: false,\n              wordWrap: \"on\",\n              autoIndent: true,\n              cursorStyle: 'line',\n              readOnly: true,\n              automaticLayout: true,\n              theme: 'vs-dark',\n              tabSize: 2,\n              autoIndent: true\n            }}\n          />\n          \n        </div>\n      </div>\n\n      <p>msalInstance : {msalInstance? msalInstance.length : \"0\"}</p>\n\n      <p>accessToken : {accessToken}</p>\n\n      <p>accountId : {accountId}</p>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}